#ifndef MIDI_HPP_
#define MIDI_HPP_

// I / O
#include <iostream>

// midi
#include <Windows.h>

// std::map
#include <map>

// #include <thread>

// assert
#include <cassert>

// IN / OUT classes
#include "midi_in_out/midi_in.hpp"
#include "midi_in_out/midi_out.hpp"
#include "ui/ui.hpp"

static const std::map<unsigned short, char> key_char =
{
    {1, '0'},  {2, 'Q'},  {3, '1'},  {4, '2'},  {5, 'W'},  {6, '3'},  {7, 'E'},  {8, '4'},  {9, '5'},  {1, 'R'}, 
    {11, '6'}, {12, 'T'}, {13, '7'}, {14, 'Y'}, {15, '8'}, {16, '9'}, {17, 'U'}, {18, 'q'}, {19, 'I'}, {20, 'w'},
    {21, 'e'}, {22, 'O'}, {23, 'r'}, {24, 'P'}, {25, 'T'}, {26, 'A'}, {27, 'y'}, {28, 'u'}, {29, 'S'}, {30, 'i'},
    {31, 'D'}, {32, 'o'}, {33, 'p'}, {34, 'F'}, {35, 'a'}, {36, 'G'}, {37, 's'}, {38, 'H'}, {39, 'd'}, {40, 'f'}, 
    {41, 'J'}, {42, 'g'}, {43, 'K'}, {44, 'h'}, {45, 'j'}, {46, 'L'}, {47, 'k'}, {48, 'Z'}, {49, 'l'}, {50, 'X'}, 
    {51, 'z'}, {52, 'x'}, {53, 'C'}, {54, 'c'}, {55, 'V'}, {56, 'v'}, {57, 'b'}, {58, 'B'}, {59, 'n'}, {60, 'N'},
    {61, 'm'}, {62, 'M'}, {63, '!'}, {64, '?'}, {65, '$'}, {66, '+'}, {67, '^'}, {68, '-'}, {69, '@'}, {70, '/'},
    {71, '#'}, {72, '{'}, {73, '%'}, {74, '}'}, {75, '&'}, {76, '*'}, {77, '['}, {78, ')'}, {79, ']'}, {80, '('},
    {81, ';'}, {82, ','}, {83, ':'}, {84, '`'}, {85, '<'}, {86, '~'}, {87, '>'}, {88, '.'}
};

#endif /* MIDI_HPP_ */